// Copyright 2020 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert REQUANTIZATION == "FP32" or not REQUANTIZATION
$assert DATATYPE in ["QC8", "QD8", "QS8", "QU8"]
$assert VARIANT in ["LD256", "EXTENDED"]
$assert MR <= 4
#include <assert.h>

#include <immintrin.h>

#include <xnnpack/gemm.h>
#include <xnnpack/intrinsics-polyfill.h>
#include <xnnpack/math.h>


$DATATYPE_SPEC = {"QC8": "qs8_qc8w", "QD8": "qd8_f32_qc8w", "QS8": "qs8", "QU8": "qu8"}[DATATYPE]
$REQUANTIZATION_SPEC = "" if DATATYPE == "QD8" else "_" + REQUANTIZATION.lower()
$GEMM_SUFFIX = "_xw" if VARIANT == "EXTENDED" else ""
$PARAMS_STRUCT = REQUANTIZATION.lower() + "_avx512"
$PARAMS_UNION = {"QC8": "xnn_qs8_qc8w_conv_minmax_params", "QD8": "xnn_f32_minmax_params", "QS8": "xnn_qs8_conv_minmax_params", "QU8": "xnn_qu8_conv_minmax_params"}[DATATYPE]
$XINT8_T = "uint8_t" if DATATYPE == "QU8" else "int8_t"
$OUT_T = "float" if DATATYPE == "QD8" else XINT8_T
$_MM512_PACKXS_EPI16 = "_mm512_packus_epi16" if DATATYPE == "QU8" else "_mm512_packs_epi16"
$_MM256_PACKXS_EPI16 = "_mm256_packus_epi16" if DATATYPE == "QU8" else "_mm256_packs_epi16"
$_MM_PACKXS_EPI16 = "_mm_packus_epi16" if DATATYPE == "QU8" else "_mm_packs_epi16"
$_MM512_MAX_EPX8 = "_mm512_max_epu8" if DATATYPE == "QU8" else "_mm512_max_epi8"
$_MM256_MAX_EPX8 = "_mm256_max_epu8" if DATATYPE == "QU8" else "_mm256_max_epi8"
$_MM_MAX_EPX8 = "_mm_max_epu8" if DATATYPE == "QU8" else "_mm_max_epi8"
$_MM_CVTEPX8_EPI16 = "_mm_cvtepu8_epi16" if DATATYPE == "QU8" else "_mm_cvtepi8_epi16"
void xnn_${DATATYPE_SPEC}_gemm${GEMM_SUFFIX}_minmax${REQUANTIZATION_SPEC}_ukernel_${MR}x16c4__avx512vnni(
    size_t mr,
    size_t nc,
    size_t kc,
    const ${XINT8_T}* restrict a,
    size_t a_stride,
    const void* restrict w,
    ${OUT_T}* restrict c,
    size_t cm_stride,
    size_t cn_stride,
    $if DATATYPE == "QD8":
      const union ${PARAMS_UNION} params[restrict XNN_MIN_ELEMENTS(1)],
      const struct xnn_qd8_quantization_params quantization_params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
    $else:
      const union ${PARAMS_UNION} params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(mr != 0);
  assert(mr <= ${MR});
  assert(nc != 0);
  assert(kc != 0);
  assert(kc % sizeof(${XINT8_T}) == 0);
  assert(a != NULL);
  assert(w != NULL);
  assert(c != NULL);

  kc = round_up_po2(kc, 4 * sizeof(${XINT8_T}));
  const ${XINT8_T}* a0 = a;
  ${OUT_T}* c0 = c;
  $for M in range(1, MR):
    const ${XINT8_T}* a${M} = (const ${XINT8_T}*) ((uintptr_t) a${M-1} + a_stride);
    ${OUT_T}* c${M} = (${OUT_T}*) ((uintptr_t) c${M-1} + cm_stride);
    $if M % 2 == 0:
      if XNN_UNPREDICTABLE(mr <= ${M}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $elif M + 1 == MR:
      if XNN_UNPREDICTABLE(mr != ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $else:
      if XNN_UNPREDICTABLE(mr < ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }

  const __mmask16 vinput_mask = _cvtu32_mask16(0xF);
  const __m512i vsaturate_min = _mm512_set1_epi32(-128);
  const __m512i vsaturate_max = _mm512_set1_epi32(127);
  $if DATATYPE == "QD8":
    $for M in range(MR):
      const __m512i vinput_zero_point${M} = _mm512_set1_epi32((int) quantization_params[${M}].zero_point);
    const __m512 voutput_min = _mm512_set1_ps(params->scalar.min);
    const __m512 voutput_max = _mm512_set1_ps(params->scalar.max);
  $else:
    $if DATATYPE != "QC8":
      const __m512 vscale = _mm512_load_ps(params->${PARAMS_STRUCT}.scale);
    const __m512 voutput_max_less_zero_point = _mm512_load_ps(params->${PARAMS_STRUCT}.output_max_less_zero_point);
    const __m512i v128 = _mm512_set1_epi8(128);
    const __m512i voutput_zero_point = _mm512_cvtepi16_epi32(_mm256_load_si256((const __m256i*) params->${PARAMS_STRUCT}.output_zero_point));
    const __m128i voutput_min = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.output_min);
  do {
    $if DATATYPE == "QD8":
      const __m512i vksum0123 = _mm512_load_epi32(vbias_mask, w);
      $for M in range(MR):
          __m512i vacc${M}x0123 = _mm512_mullo_epi32(vksum${M}x123, vinput_zero_point${M});
    $else:
      __m512i vacc0x0123 = _mm512_load_epi32(w);
      $for M in range(1, MR):
        __m512i vacc${M}x0123 = vacc0x0123;
    w = (const int32_t*) w + 16;

    size_t k = 0;
    $if DATATYPE == "QU8":
      const __m512i vb_zero_point = _mm512_load_si512(params->${PARAMS_STRUCT}.kernel_zero_point);
    while (k < kc) {
      $for M in range(MR):
        const __m128i va${M}slo = _mm_maskz_loadu_epi8(vinput_mask, a${M});

      $for M in range(MR):
        const __m128i va${M}s = _mm_shuffle_epi32(va${M}slo, _MM_SHUFFLE(0,0,0,0));

      $for M in range(MR):
        const __m512i va${M}x0123s = _mm512_broadcast_i32x4(va${M}s);

      $for M in range(MR):
        const __m512i va${M}x0123 = _mm512_xor_epi32(va${M}x0123s, v128);

      $for M in range(MR):
        a${M} += 4;

      const __m512i vb0123 = _mm512_load_si512(w);

      $for M in range(MR):
        vacc${M}x0123 = _mm512_dpbusd_epi32(vacc${M}x0123, va${M}x0123, vb0123);

      $if VARIANT == "EXTENDED":
        w = (const int16_t*) w + 128;
      $else:
        w = (const ${XINT8_T}*) w + 64;
      k += 4 * sizeof(${XINT8_T});
    }

    $for M in range(MR):
      __m512 vscaled${M}x0123 = _mm512_cvtepi32_ps(vacc${M}x0123);

    $for M in range(MR):
      vscaled${M}x0123 = _mm512_mul_ps(vscaled${M}x0123, vscale);

    $for M in range(MR):
      vscaled${M}x0123 = _mm512_min_ps(vscaled${M}x0123, voutput_max_less_zero_point);

    $for M in range(MR):
      vacc${M}x0123 = _mm512_cvtps_epi32(vscaled${M}x0123);

    $for M in range(MR):
      vacc${M}x0123 = _mm512_add_epi32(vacc${M}x0123, voutput_zero_point);

    $for M in range(MR):
      vacc${M}x0123 = _mm512_max_epi32(vacc${M}x0123, vsaturate_min);

    $for M in range(MR):
      vacc${M}x0123 = _mm512_min_epi32(vacc${M}x0123, vsaturate_max);

    $for M in range(MR):
      __m128i vout${M}x0123 = _mm512_cvtepi32_epi8(vacc${M}x0123);

    $for M in range(MR):
      vout${M}x0123 = _mm_max_epi8(vout${M}x0123, voutput_min);

    if (nc >= 16) {
      $for M in range(MR):
        _mm_storeu_si128((__m128i*) c${M}, vout${M}x0123);

      $for M in range(MR):
        a${M} = (const ${XINT8_T}*) ((uintptr_t) a${M} - k);

      $for M in range(MR):
        c${M} = (${OUT_T}*) ((uintptr_t) c${M} + cn_stride);

      nc -= 16;
    } else {
      // Prepare mask for valid 8-bit elements (depends on nc).
      const __mmask64 vmask = _cvtu64_mask64((uint64_t) ((UINT32_C(1) << nc) - UINT32_C(1)));

      $for M in range(MR):
        _mm_mask_storeu_epi8(c${M}, vmask, vout${M}x0123);

      nc = 0;
    }
  } while (nc != 0);
}
